// this animation controller exists to attempt to fix the right arm y position starting at a fully "up" level when transitioning from holding an item to holding nothing
// what it SHOULD look like:
  // 1) player holds item
  // 2) player then holds nothing
  // 1) right arm comes upwards from offscreen

// what currently happens in vanilla:
  // 1) player holds item
  // 2) player then holds nothing
  // 1) right arm starts fully upwards, comes down offscreen, then comes upwards again from offscreen

// attachables also suffer from this problem too because they are offset vertically in 1st person by variable.player_arm_height too
// hence, there is a need to check if we transitioned from holding one attachable (or more generally, any item) to another as well
// there's no good way to do this, hence using q.get_equipped_item_name (deprecated) is needed to check if we changed items

// unfortunately though, there is still the issue of the right arm instantly becoming invisible when selecting a hardcoded (i.e. non-attachable) item
// this behavior is hardcoded since the player model will not render in 1st person in this instance, no matter what we do in the render controller
{
  "format_version": "1.10.0",
  "animation_controllers": {
    "controller.animation.player.arm_height": {
      "initial_state": "idle",
      "states": {
        "idle": {
          "on_entry": [
            "v.was_item_equipped = q.is_item_equipped(0);"
          ],
          "transitions": [
            // directly copying v.player_arm_height sometimes causes a flicker when transitioning from holding an item to an empty hand
            // v.player_arm_height_custom = v.player_arm_height;
            { "test_started_ascending_1": "v.player_arm_height_custom = (q.is_item_equipped(0) ? 0 : v.player_arm_height); t.transitioned_to_no_item = (!q.is_item_equipped(0) && v.was_item_equipped); return t.transitioned_to_no_item;" },
            { "copy_var": "t.transitioned_to_no_item = (!q.is_item_equipped(0) && v.was_item_equipped); return !t.transitioned_to_no_item && (v.player_arm_height < 1.0);" }
          ]
        },
        "test_started_ascending_1": {
          "on_entry": [
            "v.player_arm_height_custom = 0.0;",
            "v.player_arm_height_custom_old = v.player_arm_height;"
          ],
          "transitions": [
            { "test_started_ascending_2": "1.0" }
          ]
        },
        "test_started_ascending_2": {
          "transitions": [
            { "copy_var": " v.player_arm_height > v.player_arm_height_custom_old" },
            { "test_started_ascending_1": "1.0" }
          ]
        },
        "copy_var": {
          "transitions": [
            { "idle": "v.player_arm_height_custom = v.player_arm_height; return v.player_arm_height >= 1.0;" }
          ]
        }
      }
    }
  }
}